<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="23" failures="0" skipped="0" tests="93" time="111.070" timestamp="2025-05-15T04:01:31.396366+00:00" hostname="fv-az1624-259"><testcase classname="tests.integration_tests.integration_test_psnawp_api.core.test_authenticator" name="test_authenticator__authentication" time="0.136" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.core.test_authenticator" name="test_authenticator__access_token_from_refresh_token" time="3.052" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.core.test_authenticator" name="test_authenticator__incorrect_npsso" time="3.022" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__online_id" time="0.036" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__account_id" time="3.009" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__get_profile_legacy" time="0.024" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__account_devices" time="0.012" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__get_friends" time="3.023" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__friend_requests" time="0.018" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__get_presences" time="3.042" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__get_groups" time="0.012" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__available_to_play" time="3.012" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__blocked_list" time="0.013" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__get_shareable_profile_link" time="0.019" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__trophy_summary" time="3.016" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__trophy_titles" time="0.012" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__trophy_titles_for_title" time="0.012" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__trophies" time="0.014" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__trophies_with_progress" time="3.015" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__trophy_groups_summary" time="0.013" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__trophy_groups_summary_with_progress" time="0.019" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__title_stats" time="3.009" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__repr_and_str" time="0.019" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__get_region" time="0.030" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_game_title" name="test_game_title__np_communication_id" time="2.998" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_game_title" name="test_game_title__ps3" time="0.006" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_game_title" name="test_game_title__ps3_illegal_arguments" time="0.006" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_game_title" name="test_game_title__wrong_title_id" time="0.014" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_game_title" name="test_game_title__get_title_details" time="3.022" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_game_title" name="test_game_title__get_localized_title_details" time="0.021" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_game_title" name="test_game_title__trophies" time="0.023" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_game_title" name="test_game_title__trophy_groups_summary" time="3.010" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_game_title" name="test_game_title__trophies_game_not_owned_by_user" time="0.014" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_game_title" name="test_game_title__trophy_groups_summary_game_not_owned_by_user" time="0.014" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_game_title" name="test_game_title__trophies_invalid_np_communication_id" time="3.012" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_game_title" name="test_game_title__trophy_groups_summary_invalid_np_communication_id" time="0.015" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_group" name="test_group__group_incorrect_args_None" time="0.006" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_group" name="test_group__group_with_wrong_id" time="0.013" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_group" name="test_group__group_with_users" time="0.197"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def friend_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:149: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:44: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f48eccbdd50&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:280: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_group" name="test_group__group_with_id" time="2.787" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_group" name="test_group__get_group_information" time="0.022" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_group" name="test_group__repr_and_str" time="0.026" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_group" name="test_group__change_name_dm" time="3.000" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_group" name="test_group__dming_blocked_user" time="0.131"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def blocked_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:149: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:44: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f48ecba6890&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:280: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_group" name="test_group__change_name" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def friend_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:149: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:44: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f48eccbdd50&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:280: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_group" name="test_group__kick_member" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def friend_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:149: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:44: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f48eccbdd50&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:280: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_group" name="test_group__kick_member_not_found" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def blocked_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:149: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:44: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f48ecba6890&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:280: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_group" name="test_group__invite_members" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def friend_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:149: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:44: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f48eccbdd50&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:280: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_group" name="test_group__invite_members_blocked" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def blocked_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:149: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:44: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f48ecba6890&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:280: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_group" name="test_group__leave_group" time="2.759" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_search" name="test_search__universal_search" time="0.017" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_search" name="test_search__get_game_content_id" time="0.016" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_search" name="test_search__get_addon_content_id" time="3.008" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__user" time="0.014" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__user_account_id" time="0.014" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__user_no_argument" time="0.007" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__user_wrong_acc_id" time="3.010" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__prev_online_id" time="0.013" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__user_not_found" time="0.014" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__user_acct_id_not_found" time="0.014" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__get_profile" time="3.016" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__get_presence" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def friend_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:149: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:44: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f48eccbdd50&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:280: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__get_presence_forbidden" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def blocked_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:149: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:44: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f48ecba6890&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:280: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__friendship" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def friend_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:149: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:44: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f48eccbdd50&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:280: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__accept_friend_request" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def friend_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:149: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:44: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f48eccbdd50&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:280: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__remove_friend" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def friend_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:149: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:44: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f48eccbdd50&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:280: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__get_friends" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def friend_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:149: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:44: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f48eccbdd50&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:280: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__get_friends_forbidden" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def blocked_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:149: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:44: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f48ecba6890&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:280: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__is_blocked" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def friend_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:149: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:44: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f48eccbdd50&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:280: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__get_shareable_profile_link" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def friend_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:149: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:44: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f48eccbdd50&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:280: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__trophy_summary" time="2.801" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__trophy_summary_forbidden" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def blocked_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:149: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:44: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f48ecba6890&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:280: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__trophy_titles" time="3.033" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__trophy_titles_forbidden" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def blocked_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:149: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:44: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f48ecba6890&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:280: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__trophy_titles_pagination_test" time="24.366" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__trophy_titles_for_title" time="0.022" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__trophy_titles_for_title_forbidden" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def blocked_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:149: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:44: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f48ecba6890&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:280: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__trophies" time="3.014" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__trophies_with_progress_forbidden" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def blocked_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:149: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:44: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f48ecba6890&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:280: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__trophies_pagination_test" time="3.023" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__trophy_groups_summary" time="3.040" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__trophy_groups_summary_forbidden" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def blocked_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:149: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:44: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f48ecba6890&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:280: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__title_stats" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def friend_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:149: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:44: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f48eccbdd50&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:280: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__title_stats_with_limit" time="6.069" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__title_stats_with_jump" time="3.037" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__repr_and_str" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def friend_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:149: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:44: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f48eccbdd50&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:280: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__get_region" time="3.007" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.utils.test_utils_misc" name="test_play_duration_to_timedelta_valid_inputs" time="0.001" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.utils.test_utils_misc" name="test_play_duration_to_timedelta_invalid_inputs" time="0.001" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.utils.test_utils_misc" name="test_extract_region_from_npid" time="0.001" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.utils.test_utils_misc" name="test_extract_npsso_input" time="0.001" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.utils.test_utils_misc" name="test_extract_npsso_invalid_json" time="0.001" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.utils.test_utils_misc" name="test_extract_npsso_invalid_json_key" time="0.001" /></testsuite></testsuites>